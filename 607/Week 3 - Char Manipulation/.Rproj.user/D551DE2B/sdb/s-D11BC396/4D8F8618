{
    "collab_server" : "",
    "contents" : "### --------------------------------------------------------------\n### AUTOMATED DATA COLLECTION WITH R\n### SIMON MUNZERT, CHRISTIAN RUBBA, PETER MEISSNER, DOMINIC NYHUIS\n###\n### CODE CHAPTER 8: REGULAR EXPRESSIONS AND ESSENTIAL STRING FUNCTIONS\n### --------------------------------------------------------------\n\n# load packages\ninstall.packages(\"XML\")\ninstall.packages(\"bitops\")\ninstall.packages(\"RCurl\")\n\n\nlibrary(stringr)\nlibrary(XML)\nlibrary(RCurl)\nlibrary(tau)\n\n# A difficult example\nraw.data <- \"555-1239Moe Szyslak(636) 555-0113Burns, C. Montgomery555-6542Rev. Timothy Lovejoy555 8904Ned Flanders636-555-3226Simpson, Homer5543642Dr. Julius Hibbert\"\n\n\nunlist(str_extract_all(raw.data, \"[[:alpha:]., ]{2,}\"))\n\n\nshopping_list <- c(\"apples x4\", \"ba4g of flour\", \"bag of sugar\", \"milk x2\")\nstr_extract(shopping_list, \"\\\\D\")\nstr_extract_all(shopping_list, \"[a-z]+\")\nstr_extract(shopping_list, \"[a-z]{1,2}\")\n\nstr_extract(shopping_list, \"\\\\b[a-p]\")\nstr_extract(shopping_list, \"\\\\b[a-z]{1,5}\\\\b\")\n\nstr_extract_all(shopping_list,\"[[:alpha:]]{2,}\")\n\nstr_extract_all(raw.data, \"[[:alpha:]]{2,}\")\n\nstr_extract_all(raw.data, \"[[a-z]. ]{2,}\")\n\nname <- unlist(str_extract_all(raw.data, \"[[:alpha:]., ]{3,}\"))\n\n\nstr_extract_all(raw.data, \"\\\\(?(\\\\d{3})?\\\\)?(-| )?\\\\d{3}(-| )?\\\\d{4}\")\nraw.data\n\nstr_extract_all(raw.data, \"\\\\(?(\\\\d{3})?\\\\)?(-| )?\\\\d{3}\\\\-\\\\d{4}\")\n\n\nstr_extract_all(raw.data, \"\\\\(?(\\\\d{3})?\\\\)?(-| )?\\\\d{3}\\\\-\\\\d{4}\")\n\n\n                \nstr_extract_all(raw.data, \"\\\\(?(\\\\d{3})?\\\\)?(-| )?\\\\d{3}?(-| )?\\\\d{4}\")\n\n\n# Extract information\nname <- unlist(str_extract_all(raw.data, \"[[:alpha:]., ]{2,}\"))\nname\nphone <- unlist(str_extract_all(raw.data, \"\\\\(?(\\\\d{3})?\\\\)?(-| )?\\\\d{3}?(- )?\\\\d{4}\"))\nphone\nname\n\nraw.data\ndata.frame(name = name, phone = phone)\n\n### 8.1 Regular expressions\n### --------------------------------------------------------------\n\n# A running example\nexample.obj <- \"1. A small sentence. - 2. Another tiny sentence.\"\n\n### 8.1.1 Exact character matching\n### --------------------------------------------------------------\n\n# A string matching itself\nstr_extract(example.obj, \"small\")\nstr_extract(example.obj, \"banana\")\nunlist(str_extract_all(example.obj, \"sentence\"))\n\n# String vector\nout <- str_extract_all(c(\"text\", \"manipulation\", \"basics\"), \"a\")\nout\n\n# Case-sensitive matching\nstr_extract(example.obj, \"small\")\nstr_extract(example.obj, \"SMALL\")\nstr_extract(example.obj, ignore.case(\"SMALL\"))\n\n# Matching a particle, alphabetic characters and blank spaces\nunlist(str_extract_all(example.obj, \"en\"))\nstr_extract(example.obj, \"mall sent\")\n\n# Matching beginning and end of a string\nstr_extract(example.obj, \"2\")\nstr_extract(example.obj, \"^2\")\nunlist(str_extract_all(example.obj, \"sentence$\"))\n\n# Pipe operator\nunlist(str_extract_all(example.obj, \"tiny|sentence\"))\n\n### 8.1.2 Generalizing regular expressions\n### --------------------------------------------------------------\n\n# Any character\nstr_extract(example.obj, \"sm.+sen\")\n\n# Character classes\nstr_extract(example.obj, \"sm[abc]ll\")\n\n# Ranges in character class\nstr_extract(example.obj, \"sm[a-p]ll\")\n\n# Literal dots inside a character class\nunlist(str_extract_all(example.obj, \"[.]\"))\n\n# Predefined character classes\nunlist(str_extract_all(example.obj, \"[[:punct:]]\"))\n\n# Wrong usage of predefined character classes\nunlist(str_extract_all(example.obj, \"[:punct:]\"))\n\n# Redundancy inside a character class\nunlist(str_extract_all(example.obj, \"[AAAAA]\"))\n\n# Special characters inside a character class\nstr_extract(\"François Hollande\", \"Fran[a-z]ois\")\nstr_extract(\"François Hollande\", \"Fran[[:alpha:]]ois\")\n\n# Adding to character classes\nunlist(str_extract_all(example.obj, \"[[:punct:]ABC]\"))\n\n# Negation of a character class\nunlist(str_extract_all(example.obj, \"[^[:alnum:]]\"))\n\n# Quantifiers\nstr_extract(example.obj, \"s[[:alpha:]][[:alpha:]][[:alpha:]]\")\nstr_extract(example.obj, \"s[[:alpha:]]{2}l\")\n\n# Greedy matching\nstr_extract(example.obj, \"A.+sentence\")\nstr_extract(example.obj, \"A.+?sentence\")\n\n# Quantifying a group of characters\nunlist(str_extract_all(example.obj, \"(.nc){1,5}\"))\nunlist(str_extract_all(example.obj, \".en{1,5}\"))\n\n# Literal metacharacters\nunlist(str_extract_all(example.obj, \".\"))\nunlist(str_extract_all(example.obj, fixed(\".\")))\n\n# Shortcuts of character classes\nunlist(str_extract_all(example.obj, \"\\\\w+\"))\n\n# Word edges\nunlist(str_extract_all(example.obj, \"e\\\\>\"))\nunlist(str_extract_all(example.obj, \"e\\\\b\"))\n\n# Backreferencing\nstr_extract(example.obj, \"([[:alpha:]]).+?\\\\1\")\nstr_extract(example.obj, \"(\\\\<[b-z]+\\\\>).+?\\\\1\")\n\n### 8.1.3 The introductory example reconsidered\n### --------------------------------------------------------------\n\nraw.data <- \"555-1239Moe Szyslak(636) 555-0113Burns, C. Montgomery555-6542Rev. Timothy Lovejoy555 8904Ned Flanders636-555-3226Simpson, Homer5543642Dr. Julius Hibbert\"\n\nname <- unlist(str_extract_all(raw.data, \"[[:alpha:]., ]{2,}\"))\nname\nphone <- unlist(str_extract_all(raw.data, \"\\\\(?(\\\\d{3})?\\\\)?(-| )?\\\\d{3}(-| )?\\\\d{4}\"))\nphone\n\n### 8.2 String Processing\n### --------------------------------------------------------------\n\n### 8.2.1 The stringr package\n### --------------------------------------------------------------\n\n# str_extract()\nstr_extract(example.obj, \"tiny\")\nstr_extract_all(example.obj, \"[[:digit:]]\")\n\n# str_locate() \nstr_locate(example.obj, \"tiny\")\n\n# str_sub()\nstr_sub(example.obj, start = 35, end = 38)\nstr_sub(example.obj, 35, 38) <- \"huge\"\nexample.obj\n\n#str_replace()\nstr_replace(example.obj, pattern = \"huge\", replacement = \"giant\")\n\n# str_split() / str_split_fixed()\nunlist(str_split(example.obj, \"-\"))\nas.character(str_split_fixed(example.obj, \"[[:blank:]]\", 13))\n\n# A character vector\nchar.vec <- c(\"this\", \"and this\", \"and that\")\n\n# str_detect()\nstr_detect(char.vec, \"this\")\n\n# str_count()\nstr_count(char.vec, \"this\")\nstr_count(char.vec, \"\\\\w+\")\n\n# str_dup()\ndup.obj <- str_dup(char.vec, 3)\ndup.obj\n\n# str_length()\nlength.char.vec <- str_length(char.vec)\nlength.char.vec\n\n# str_pad() / str_trim()\nchar.vec <- str_pad(char.vec, width = max(length.char.vec), side = \"both\", pad = \" \")\nchar.vec\nchar.vec <- str_trim(char.vec)\nchar.vec\n\n# str_c()\ncat(str_c(char.vec, collapse = \"\\n\"))\nstr_c(\"text\", \"manipulation\", sep = \" \")\nstr_c(\"text\", c(\"manipulation\", \"basics\"), sep = \" \")\n\n### 8.2.2 A couple more handy functions\n### --------------------------------------------------------------\n\n# Approximate matching\nagrep(\"Barack Obama\", \"Barack H. Obama\", max.distance = list(all = 3))\nagrep(\"Barack Obama\", \"Michelle Obama\", max.distance = list(all = 3))\n\n# Partial string matching\npmatch(c(\"and this\", \"and that\", \"and these\", \"and those\"), char.vec)\n\n# Make unique\nmake.unique(c(\"a\", \"b\", \"a\", \"c\", \"b\", \"a\"))\n\n### Extending base functionality - grepall()\n# load Simpsons data set\nload(\"episodes.Rdata\")\n\ngrep(\"Homer\", episodes$title[1:10], value = T)\ngrepl(\"Homer\", episodes$title[1:10])\n\niffer1 <- grepl(\"Homer\", episodes$title)\niffer2 <- grepl(\"Lisa\", episodes$title)\niffer <- iffer1 & iffer2\nepisodes$title[iffer]\n\ngrepall <- function(pattern, x, ignore.case = FALSE, perl = FALSE, fixed = FALSE, useBytes = FALSE, value = FALSE, logic = FALSE){\n    # error and exception handling\n    if(length(pattern) == 0 | length(x) == 0){\n        warning(\"Length of pattern or data equals zero.\")\n        return(NULL)\n    }\n    # apply grepl() and all()\n    indices <- sapply(pattern, grepl, x, ignore.case, perl, fixed, useBytes)\n    index <- apply(indices, 1, all)\n    # indexation and return of results\n    if(logic == T) return(index)\n    if(value == F) return((1:length(x))[index])\n    if(value == T) return(x[index])\n}\n\ngrepall(c(\"Lisa\", \"Homer\"), episodes$title)\ngrepall(c(\"Lisa\", \"Homer\"), episodes$title, value = T)\n\n### 8.3 A word on character encodings\n### --------------------------------------------------------------\n\n# Query your locale\nSys.getlocale()\n\n# An example string\nsmall.frogs <- \"Små grodorna, små grodorna är lustiga att se.\"\nsmall.frogs\n\n# Translate the encoding\nsmall.frogs.utf8 <- iconv(small.frogs, from = \"windows-1252\", to = \"UTF-8\")\nsmall.frogs.utf8\n\n# Declare an encoding\nEncoding(small.frogs.utf8) <- \"windows-1252\"\nsmall.frogs.utf8\n\n# Sample from the list of available conversions\nsample(iconvlist(), 100)\niconvlist()\n# Meta tags from Science\nenc.test <- getURL(\"http://www.sciencemag.org/\")\nunlist(str_extract_all(enc.test, \"<meta.+?>\"))\n\n# Guess encodings\nis.locale(small.frogs)\nis.ascii(small.frogs)\n",
    "created" : 1473698453642.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4060590346",
    "id" : "4D8F8618",
    "lastKnownWriteTime" : 1473936170,
    "last_content_update" : 1473936170375,
    "path" : "C:/CUNY/Courses/607/Week3_Sep_12th/Week3_ch-8-regex.R",
    "project_path" : "Week3_ch-8-regex.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}